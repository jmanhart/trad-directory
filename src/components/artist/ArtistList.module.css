/* grid.css */

/* Define base CSS variables for grid spacing and column count */
:root {
  --grid-gap: 16px;
  --num-columns: 1; /* Default: mobile (1 column) */
}

/* At 600px, use 2 columns */
@media (min-width: 600px) {
  :root {
    --num-columns: 2;
  }
}

/* At 900px, use 3 columns */
@media (min-width: 900px) {
  :root {
    --num-columns: 3;
  }
}

/* At 1200px, use 4 columns */
@media (min-width: 1200px) {
  :root {
    --num-columns: 3;
  }
}

.list {
  display: grid;
  gap: var(--grid-gap);
  /* 
    The calculation subtracts the total gap width for (columns - 1) gaps from 100% 
    and then divides the remaining width equally among the columns.
  */
  grid-template-columns: repeat(
    auto-fit,
    minmax(
      calc(
        (100% - (var(--grid-gap) * (var(--num-columns) - 1))) /
          var(--num-columns)
      ),
      1fr
    )
  );
  align-content: start;
  /* 
    Padding here gives a consistent outer margin equal to the gap, so the gridâ€™s
    outer edge aligns with the internal spacing.
  */
  padding: var(--grid-gap);
}
